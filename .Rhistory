str_detect(`Property Name`, "^London Guest House") ~ "Guest House",
str_detect(`Property Name`, "^Xenia") ~ "Xenia",
str_detect(`Property Name`, "^Mandarin") ~ "Mandarin",
str_detect(`Property Name`, "^Mondrian") ~ "Mondrian",
str_detect(`Property Name`, "^Wellesley") ~ "Wellesley",
TRUE ~ `Property Name`
),
`Property Name` = factor(`Property Name`),
review_id = row_number()
) %>%
janitor::clean_names(case = "snake") %>%
rename(review_dt = date_of_review, reviewer_loc = location_of_the_reviewer) %>%
select(review_id, everything())
hotel_1 <- hotel_0 %>%
mutate(
review_text = iconv(review_text, from = "", to = "ASCII", sub = "byte"),
review_text = str_remove_all(review_text, "\\<[[:alnum:]]+\\>")
) %>%
# Exclude reviews written in a foreign language. One heuristic to handle this
# is to look for words common in other languages that do not also occur in English.
filter(!str_detect(review_text, "( das )|( der )|( und )|( en )")) %>% # German
filter(!str_detect(review_text, "( et )|( de )|( le )|( les )")) %>%   # French
filter(!str_detect(review_text, "( di )|( e )|( la )")) %>%            # Italian
filter(!str_detect(review_text, "( un )|( y )"))                       # Spanish
hotel_1 %>%
count(property_name, review_rating) %>%
mutate(review_rating = factor(review_rating)) %>%
ggplot(aes(y = fct_rev(property_name), x = n, fill = fct_rev(review_rating))) +
geom_col(color = "gray80") +
scale_fill_brewer(type = "div", direction = -1) +
labs(
y = NULL, fill = NULL,
title = glue("{comma(nrow(hotel_1),1)} Reviews of 20 Hotels")
)
# Get list of misspellings and their correction. Unfortunately, there are multiple
# possible right spellings! (sigh) just choose one.
spell_check <- fuzzyjoin::misspellings %>% distinct(misspelling, .keep_all = TRUE)
# Create a list of stop words. Start with a standard list.
stop_0 <- stopwords::stopwords(language = 'en',source='stopwords-iso')
# Some are potentially useful, so remove them from the stop list.
stop_restart <- c(
"appreciate", ""
)
stop_1 <- stop_0[!stop_0 %in% stop_restart]
# Add your own custom words
hotel_2 <- hotel_1 %>%
# remove punctuation
mutate(review_text = str_remove_all(review_text, "[:punct:]")) %>%
# create unigrams
unnest_tokens("word", review_text) %>%
# correct misspellings
left_join(
fuzzyjoin::misspellings %>% distinct(misspelling, .keep_all = TRUE),
by = join_by(word == misspelling)
) %>%
mutate(word = coalesce(correct, word)) %>%
select(-correct) %>%
# lemmatize words
mutate(word = textstem::lemmatize_words(word, dictionary = lexicon::hash_lemmas)) %>%
# remove stop words
anti_join(stop_words, by = "word") %>%
# reconstruct the text
nest(token_list = word) %>%
mutate(review_text = map_chr(token_list, ~ unlist(.) %>% paste(collapse = " "))) %>%
select(-token_list)
tokens_0 %>%
count(review_id) %>%
mutate(n_bin = cut(n, breaks = c(0, seq(50, 500, 50), Inf))) %>%
summarize(.by = n_bin, n = n()) %>%
ggplot(aes(x = n_bin, y = n)) +
geom_col()
install.packages("stm")
install.packages("topicmodels")
library(tidyverse)
library(stm)
library(topicmodels)
gadarian_dat <- stm::gadarian %>%
rename(comment = open.ended.response) %>%
select(-MetaID)
glimpse(gadarian_dat)
gadarian_processed <- textProcessor(gadarian_dat$comment, metadata = gadarian_dat)
plotRemoved(gadarian_processed$documents, lower.thresh = seq(10, 200, by = 10))
# (sawyer_tm <- VCorpus(VectorSource(sawyer$text)) %>%
#   tm_map(content_transformer(replace_abbreviation)) %>%
#   tm_map(removePunctuation) %>%
#   tm_map(removeNumbers) %>%
#   tm_map(content_transformer(tolower)) %>%
#   tm_map(removeWords, c(stopwords("en"), "tom")) %>%
#   tm_map(stripWhitespace))
# (sawyer_tm_dtm <- DocumentTermMatrix(sawyer_tm))
#   group_by(chapter) %>%
#   mutate(text = paste(text, collapse = " ")) %>%
#   slice_head(n = 1) %>%
#   select(chapter, text)
#
# sawyer_sent <- sawyer %>%
#   sentSplit("text")
#
# skimr::skim(sawyer)
library(tidyverse)
library(qdap)
library(tidyverse)
library(qdap)
intall.packages("qdap")
install.packages("qdap")
library(qdap)
library(tidyverse)
# library(qdap)
library(sentimentr)
library(tidytext)
library(magrittr)
library(tm)
library(ggthemes)
library(scales)
library(flextable)
library(janitor)
library(gtsummary)
hotel_raw_1 <- read_csv("https://query.data.world/s/2zsbemxf66vevuuc47jqe24n4zwl54") %>%
mutate(`Date Of Review` = lubridate::mdy(`Date Of Review`),
`Property Name` = trimws(str_remove(`Property Name`, "Hotel")),
`Property Name` = trimws(str_remove(`Property Name`, "The")),
`Property Name` = case_when(
str_detect(`Property Name`, "^45 Park Lane") ~ "45 Park Lane",
str_detect(`Property Name`, "^Apex") ~ "Apex",
str_detect(`Property Name`, "^Bulgari") ~ "Bulgari",
str_detect(`Property Name`, "^Corinthia") ~ "Corinthia",
str_detect(`Property Name`, "^London Guest House") ~ "Guest House",
str_detect(`Property Name`, "^Xenia") ~ "Xenia",
str_detect(`Property Name`, "^Mandarin") ~ "Mandarin",
str_detect(`Property Name`, "^Mondrian") ~ "Mondrian",
str_detect(`Property Name`, "^Wellesley") ~ "Wellesley",
TRUE ~ `Property Name`),
`Property Name` = factor(`Property Name`),
review_id = row_number()
) %>%
janitor::clean_names(case = "snake") %>%
select(review_id, everything())
skimr::skim(hotel_raw_1)
hotel_raw_2 <- hotel_raw_1 %>%
mutate(
review_text = iconv(review_text, from = "", to = "ASCII", sub = "byte"),
review_text = str_remove_all(review_text, "\\<[[:alnum:]]+\\>")
)
hotel <- hotel_raw_2 %>%
filter(!str_detect(review_text, "( das )|( der )|( und )|( en )")) %>% # German
filter(!str_detect(review_text, "( et )|( de )|( le )|( les )")) %>% # French
filter(!str_detect(review_text, "( di )|( e )|( la )")) %>%          # Italian
filter(!str_detect(review_text, "( un )|( y )")) %>%                 # Spanish
select(review_id, everything())
sentiment_bing <- get_sentiments("bing")
sentiment_bing %>% count(sentiment) %>%
adorn_totals() %>%
flextable() %>% autofit() %>% colformat_int(j = 2) %>% set_caption("Bing Lexicon")
sentiment_afinn <- get_sentiments("afinn")
install.packages("textdata")
sentiment_afinn <- get_sentiments("afinn")
sentiment_afinn %>% count(value) %>%
adorn_totals() %>%
flextable() %>% autofit() %>% colformat_int(j = 2) %>% set_caption("AFINN Lexicon")
library(tidyverse)
# library(qdap)
library(sentimentr)
library(tidytext)
library(magrittr)
library(tm)
library(ggthemes)
library(scales)
library(flextable)
library(janitor)
library(gtsummary)
hotel_raw_1 <- read_csv("https://query.data.world/s/2zsbemxf66vevuuc47jqe24n4zwl54") %>%
mutate(`Date Of Review` = lubridate::mdy(`Date Of Review`),
`Property Name` = trimws(str_remove(`Property Name`, "Hotel")),
`Property Name` = trimws(str_remove(`Property Name`, "The")),
`Property Name` = case_when(
str_detect(`Property Name`, "^45 Park Lane") ~ "45 Park Lane",
str_detect(`Property Name`, "^Apex") ~ "Apex",
str_detect(`Property Name`, "^Bulgari") ~ "Bulgari",
str_detect(`Property Name`, "^Corinthia") ~ "Corinthia",
str_detect(`Property Name`, "^London Guest House") ~ "Guest House",
str_detect(`Property Name`, "^Xenia") ~ "Xenia",
str_detect(`Property Name`, "^Mandarin") ~ "Mandarin",
str_detect(`Property Name`, "^Mondrian") ~ "Mondrian",
str_detect(`Property Name`, "^Wellesley") ~ "Wellesley",
TRUE ~ `Property Name`),
`Property Name` = factor(`Property Name`),
review_id = row_number()
) %>%
janitor::clean_names(case = "snake") %>%
select(review_id, everything())
skimr::skim(hotel_raw_1)
hotel_raw_2 <- hotel_raw_1 %>%
mutate(
review_text = iconv(review_text, from = "", to = "ASCII", sub = "byte"),
review_text = str_remove_all(review_text, "\\<[[:alnum:]]+\\>")
)
hotel <- hotel_raw_2 %>%
filter(!str_detect(review_text, "( das )|( der )|( und )|( en )")) %>% # German
filter(!str_detect(review_text, "( et )|( de )|( le )|( les )")) %>% # French
filter(!str_detect(review_text, "( di )|( e )|( la )")) %>%          # Italian
filter(!str_detect(review_text, "( un )|( y )")) %>%                 # Spanish
select(review_id, everything())
sentiment_bing <- get_sentiments("bing")
sentiment_bing %>% count(sentiment) %>%
adorn_totals() %>%
flextable() %>% autofit() %>% colformat_int(j = 2) %>% set_caption("Bing Lexicon")
sentiment_afinn <- get_sentiments("afinn")
sentiment_afinn %>% count(value) %>%
adorn_totals() %>%
flextable() %>% autofit() %>% colformat_int(j = 2) %>% set_caption("AFINN Lexicon")
sentiment_nrc <- get_sentiments("nrc")
sentiment_nrc %>% count(sentiment) %>%
adorn_totals() %>%
flextable() %>% autofit() %>% colformat_int(j = 2) %>% set_caption("NRC Lexicon")
hotel_tidy <- hotel %>%
select(review_id, review_text) %>%
unnest_tokens(output = "word", input = review_text)
hotel_wordcount <- hotel_tidy %>%
count(review_id)
hotel_tidy_polarity_1 <- hotel_tidy %>%
inner_join(get_sentiments("bing"), by = "word") %>%
group_by(review_id, sentiment) %>%
summarize(.groups = "drop",
n = n(),
words = list(word)) %>%
pivot_wider(names_from = sentiment, values_from = c(n, words), values_fill = list(n = 0))
hotel_tidy_polarity_bing <- hotel %>%
left_join(hotel_wordcount, by = "review_id") %>%
left_join(hotel_tidy_polarity_1, by = "review_id") %>%
mutate(polarity_score = (n_positive - n_negative) / sqrt(n),
polarity_desc = if_else(polarity_score >= 0, "Positive", "Negative"))
hotel_tidy_polarity_2 <- hotel_tidy %>%
inner_join(get_sentiments("afinn"), by = "word") %>%
group_by(review_id) %>%
summarize(.groups = "drop",
sentiment = sum(value),
words = list(word))
hotel_tidy_polarity_afinn <- hotel %>%
left_join(hotel_wordcount, by = "review_id") %>%
left_join(hotel_tidy_polarity_2, by = "review_id") %>%
mutate(polarity_score = sentiment / sqrt(n),
polarity_desc = if_else(polarity_score >= 0, "Positive", "Negative"))
hotel_tidy_polarity_bing %>%
group_by(property_name) %>%
mutate(median_polarity = median(polarity_score, na.rm = TRUE)) %>%
ungroup() %>%
arrange(median_polarity) %>%
ggplot(aes(x = fct_inorder(property_name), y = polarity_score)) +
geom_jitter(width = 0.2, alpha = 0.3, color = "#5DA5DA", size = 1) +
geom_boxplot(alpha = 0) +
geom_hline(yintercept = 0, linetype = "longdash", color = "#60BD68", size = 1.25) +
coord_flip() +
theme_minimal() +
labs(title = "Few Reviews for a Reason?",
subtitle = "Hotels with few reviews tend to have negative reviews.",
x = NULL, y = "Sentiment Polarity Score",
caption = "Bing Polarity = (n_pos - n_neg) / sqrt(n_words)")
hotel_tidy_polarity_afinn %>%
group_by(property_name) %>%
mutate(median_polarity = median(polarity_score, na.rm = TRUE)) %>%
ungroup() %>%
arrange(median_polarity) %>%
ggplot(aes(x = fct_inorder(property_name), y = polarity_score)) +
geom_jitter(width = 0.2, alpha = 0.3, color = "#5DA5DA", size = 1) +
geom_boxplot(alpha = 0) +
geom_hline(yintercept = 0, linetype = "longdash", color = "#60BD68", size = 1.25) +
coord_flip() +
theme_minimal() +
labs(title = "Few Reviews for a Reason?",
subtitle = "Hotels with few reviews tend to have negative reviews.",
x = NULL, y = "Sentiment Polarity Score",
caption = "AFINN Polarity = sentiment / sqrt(n_words)")
hotel_tidy_polarity_bing %>%
filter(!is.na(polarity_score)) %>%
ggplot(aes(x = as_factor(review_rating), y = polarity_score)) +
geom_jitter(width = 0.2, alpha = 0.3, color = "#5DA5DA", size = 1) +
geom_boxplot(alpha = 0) +
theme_minimal() +
labs(title = "Few Reviews for a Reason?",
subtitle = "Hotels with few reviews tend to have negative reviews.",
x = NULL, y = "Sentiment Polarity Score",
caption = "Polarity = (n_pos - n_neg) / sqrt(n_words)")
hotel_tidy_polarity_bing %>%
filter(review_rating == 1) %>%
slice_max(polarity_score) %>%
select(polarity_score, review_text) %>%
flextable() %>% autofit()
hotel_tidy_polarity_bing %>%
filter(review_rating == 5) %>%
slice_min(polarity_score) %>%
select(polarity_score, review_text) %>%
flextable() %>% autofit()
hotel_tidy_polarity_bing %>%
mutate(review_rating = as.factor(review_rating)) %>%
filter(!is.na(polarity_desc)) %>%
select(!c(words_positive, words_negative)) %>%  # no lists allowed
unnest_tokens("word", review_text) %>%
anti_join(stop_words, by = "word") %>%
filter(!str_detect(word, "[0-9]")) %>%
filter(!word %in% c("hotel", "stay", "night", "london")) %>%
count(review_rating, polarity_desc, word) %>%
group_by(review_rating, polarity_desc) %>%
slice_max(order_by = n, n = 8, with_ties = FALSE) %>%
mutate(n = if_else(polarity_desc == "Negative", -n, n),
word = paste0(if_else(polarity_desc == "Negative", "-", "+"), word)) %>%
ungroup() %>%
arrange(review_rating, n) %>%
ggplot(aes(x = fct_inorder(word), y = n, fill = polarity_desc, color = polarity_desc)) +
geom_col(alpha = 0.6) +
facet_wrap(~as.factor(review_rating), scales = "free") +
scale_fill_few() +
scale_color_few() +
coord_flip() +
theme_minimal() +
theme(legend.position = "top") +
labs(title = "Top Words by review type", y = "Word Count", x = NULL,
fill = NULL, color = NULL)
hotel_tidy_polarity_bing %>%
unnest_tokens(output = "word", input = review_text) %>%
anti_join(stop_words, by = "word") %>%
filter(!str_detect(word, "[0-9]") & !is.na(polarity_desc)) %>%
filter(!word %in% c("hotel", "stay", "night", "london")) %>%
count(word, polarity_desc, wt = n) %>%
pivot_wider(names_from = polarity_desc, values_from = n, values_fill = 0) %>%
data.table::data.table() %>%
as.matrix(rownames = "word") %>%
wordcloud::comparison.cloud(max.words = 20, title.size = 1.5)
hotel_sentr_polarity_1 <- hotel %>%
mutate(sentences = get_sentences(review_text)) %$%
sentiment_by(sentences, review_id)
hotel_sentr_polarity <- hotel %>%
left_join(hotel_sentr_polarity_1, by = "review_id") %>%
mutate(polarity_desc = if_else(ave_sentiment >= 0, "Positive", "Negative"))
hotel_sentr_polarity %>%
group_by(property_name) %>%
mutate(median_polarity = median(ave_sentiment, na.rm = TRUE)) %>%
ungroup() %>%
arrange(median_polarity) %>%
ggplot(aes(x = fct_inorder(property_name), y = ave_sentiment)) +
geom_jitter(width = 0.2, alpha = 0.3, color = "#5DA5DA", size = 1) +
geom_boxplot(alpha = 0) +
geom_hline(yintercept = 0, linetype = "longdash", color = "#60BD68", size = 1.25) +
coord_flip() +
theme_minimal() +
labs(title = "Few Reviews for a Reason?",
subtitle = "Hotels with few reviews tend to have negative reviews.",
x = NULL, y = "Sentiment Polarity Score",
caption = "Sentimentr Polarity")
hotel_sentr_polarity %>%
filter(!is.na(ave_sentiment)) %>%
ggplot(aes(x = as_factor(review_rating), y = ave_sentiment)) +
geom_jitter(width = 0.2, alpha = 0.3, color = "#5DA5DA", size = 1) +
geom_boxplot(alpha = 0) +
theme_minimal() +
labs(title = "Few Reviews for a Reason?",
subtitle = "Hotels with few reviews tend to have negative reviews.",
x = NULL, y = "Sentiment Polarity Score",
caption = "Polarity = (n_pos - n_neg) / sqrt(n_words)")
# hotel_sentr_polarity <- hotel %>%
#   mutate(sentences = get_sentences(review_text)) %>%
#   sentiment_by(sentences, list(review_id))
# hotel_qdap_polarity <- hotel %$%
#   polarity(review_text, review_id)
#
# scores(hotel_qdap_polarity)
# sawyer[57,]
# counts(sawyer_tm_polarity)[57,]
# counts(sawyer_tm_polarity)[57, c("pos.words", "neg.words")] %>% unlist()
# custom_frame <- sentiment_frame(
#   positives = qdapDictionaries::positive.words[qdapDictionaries::positive.words != "mighty"],
#   negatives = qdapDictionaries::negative.words
# )
#
# sawyer_tm_polarity_2 <- sawyer %>%
#   mutate(text = str_remove_all(text, "\\_")) %$%
#   polarity(
#     text, chapter,
#     polarity.frame = custom_frame,
#     amplifiers = sort(c(qdapDictionaries::amplification.words, "mighty"))
#   )
#
# counts(sawyer_tm_polarity_2)[57,]
# plot(sawyer_tm_polarity_2)
# sawyer_tm_polarity_2 %>%
#   scores() %>%
#   mutate(chapter = as.integer(chapter)) %>%
#   ggplot(aes(x = chapter, y = ave.polarity)) +
#   geom_point() +
#   geom_segment(aes(x = chapter, xend = chapter, y = 0, yend = ave.polarity)) +
#   geom_smooth() +
#   geom_hline(yintercept = 0, color = "red") +
#   theme_minimal() +
#   labs(title = "Adventures of Tom Sawyer Chronological Polarity")
# sawyer_poloarity_pos <- sawyer_tm_polarity_2$all %>%
#   filter(polarity > 0) %>%
#   pull(text.var) %>%
#   paste(collapse = " ")
#
# sawyer_poloarity_neg <- sawyer_tm_polarity_2$all %>%
#   filter(polarity < 0) %>%
#   pull(text.var) %>%
#   paste(collapse = " ")
#
# sawyer_polarity_tdm <- c(sawyer_poloarity_pos, sawyer_poloarity_neg) %>%
#   VectorSource() %>%
#   VCorpus() %>%
#   TermDocumentMatrix(control = list(weighting = weightTfIdf,
#                                     removePunctuation = TRUE,
#                                     stopwords = stopwords(kind = "en")))
# dat <- sawyer_tidy %>%
#   inner_join(get_sentiments("nrc"), by = "word") %>%
#   filter(!sentiment %in% c("positive", "negative")) %>%
#   mutate(sentiment = case_when(sentiment == "joy" ~ 1,
#                                sentiment == "trust" ~ 2,
#                                sentiment == "fear" ~ 3,
#                                sentiment == "surprise" ~ 4,
#                                sentiment == "sadness" ~ 5,
#                                sentiment == "disgust" ~ 6,
#                                sentiment == "anger" ~ 7,
#                                sentiment == "anticipation" ~ 8,
#                                TRUE ~ 9),
#          sentiment = factor(sentiment, levels = c(1:9),
#                             labels = c("joy", "trust", "fear", "surprise",
#                                        "sadness", "disgust", "anger",
#                                        "anticipation", "other"))) %>%
#   count(sentiment)
#
# dat %>%
#   radarchart::chartJSRadar()
# library(gutenbergr)
# sawyer_raw <- gutenberg_works(title == "The Adventures of Tom Sawyer") %>%
#   gutenberg_download()
# hotel %>% filter(is.na(date_of_review))
# min(hotel$date_of_review, na.rm = TRUE)
# skimr::skim(sawyer_raw)
# sawyer <- sawyer_raw %>%
#   tail(-455) %>%  # chapter 1 starts on line 456
#   mutate(
#     is_chap = str_detect(text, regex("^chapter [\\divxlc]", ignore_case = TRUE)),
#     chapter = cumsum(is_chap)
#   ) %>%
#   filter(text != "" & !str_detect(text, regex("^chapter [\\divxlc]", ignore_case = TRUE))) %>%
#   mutate(line = row_number()) %>%
#   select(line, chapter, text)
# head(sawyer)
# sawyer_tidy %>%
#   anti_join(stop_words, by = "word") %>%
#   filter(!str_detect(word, "[0-9]")) %>%
#   inner_join(get_sentiments("nrc"), by = "word") %>%
#   filter(sentiment %in% c("positive", "negative")) %>%
#   count(chapter, sentiment) %>%
#   group_by(chapter) %>%
#   mutate(pct = n / sum(n)) %>%
#   ggplot(aes(x = chapter, y = pct, fill = sentiment, color = sentiment)) +
#   geom_area(alpha = 0.6) +
#   scale_x_continuous(breaks = 1:35, minor_breaks = NULL) +
#   scale_fill_few() +
#   scale_color_few() +
#   geom_hline(yintercept = 0.5, linetype = 2) +
#   theme_minimal() +
#   theme(legend.position = "top") +
#   labs(title = "Sentiment Proportion by Chapter", x = NULL, y = NULL, fill = NULL, color = NULL)
# sawyer_tidy %>%
#   anti_join(stop_words, by = "word") %>%
#   filter(!str_detect(word, "[0-9]")) %>%
#   inner_join(get_sentiments("afinn"), by = "word") %>%
#   ggplot(aes(x = value)) +
#   geom_density(fill = ggthemes::few_pal()(1), alpha = 0.6) +
#   theme_minimal() +
#   labs(title = "AFINN Score Density")
# sawyer_tidy %>%
#   inner_join(get_sentiments("bing"), by = "word") %>%
#   count(chapter, line, sentiment) %>%
#   pivot_wider(names_from = sentiment, values_from = n, values_fill = 0) %>%
#   mutate(polarity = positive - negative) %>%
#   ggplot(aes(x = as.factor(chapter), y = polarity)) +
#   geom_boxplot() +
#   geom_jitter(aes(color = as.factor(chapter)), alpha = 0.6, size = .5, show.legend = FALSE) +
#   theme_minimal() +
#   labs(title = "Chapter Polarity")
# sawyer_tidy %>%
#   inner_join(get_sentiments("afinn"), by = "word") %>%
#   count(chapter, value) %>%
#   ggplot(aes(area = n, fill = value)) +
#   treemapify::geom_treemap()
# data("misspellings", package = "fuzzyjoin")
#
# # Some misspelling have multiple correct possibilities - choose one
# misspellings_winner <- misspellings %>%
#   group_by(misspelling) %>%
#   slice(n = 1)
#
# hotel <- hotel_raw_3 %>%
#   unnest_tokens("word", review_text) %>%
#   left_join(misspellings, by = c("word" = "misspelling")) %>%
#   word = coalesce(correct, word)
# hotel_raw_2 %>% filter(review_id %in% c(28)) %>%
#   select(review_text) %>%
#   flextable::flextable()
my_aov <- aov(polarity_score ~ as.factor(review_rating), data = hotel_tidy_polarity_bing)
my_anova <- anova(my_aov)
tidy(my_anova)
my_anova
my_anova %>% str()
my_anova %>% broom::tidy()
my_aov <- aov(polarity_score ~ as.factor(review_rating), data = hotel_tidy_polarity_bing)
my_anova <- anova(my_aov)
broom::tidy(my_anova)
#plot(TukeyHSD(my_aov))
my_lm <- lm(polarity_score ~ as.factor(review_rating), data = hotel_tidy_polarity_bing)
summary(my_lm)
tbl_regression(my_lm)
