TRUE ~ `Property Name`
),
`Property Name` = factor(`Property Name`),
review_id = row_number()
) %>%
janitor::clean_names(case = "snake") %>%
rename(list(date_of_review = "review_dt", location_of_the_reviewer = "reviewer_loc")) %>%
select(review_id, everything())
?rename
hotel_0 <- read_csv("input/london_hotel_reviews.csv") %>%
mutate(
`Date Of Review` = lubridate::mdy(`Date Of Review`),
`Property Name` = str_trim(str_remove(`Property Name`, "Hotel")),
`Property Name` = str_trim(str_remove(`Property Name`, "The")),
`Property Name` = case_when(
str_detect(`Property Name`, "^45 Park Lane") ~ "45 Park Lane",
str_detect(`Property Name`, "^Apex") ~ "Apex",
str_detect(`Property Name`, "^Bulgari") ~ "Bulgari",
str_detect(`Property Name`, "^Corinthia") ~ "Corinthia",
str_detect(`Property Name`, "^London Guest House") ~ "Guest House",
str_detect(`Property Name`, "^Xenia") ~ "Xenia",
str_detect(`Property Name`, "^Mandarin") ~ "Mandarin",
str_detect(`Property Name`, "^Mondrian") ~ "Mondrian",
str_detect(`Property Name`, "^Wellesley") ~ "Wellesley",
TRUE ~ `Property Name`
),
`Property Name` = factor(`Property Name`),
review_id = row_number()
) %>%
janitor::clean_names(case = "snake") %>%
rename(review_dt = date_of_review, reviewer_loc = location_of_the_reviewer)) %>%
hotel_0 <- read_csv("input/london_hotel_reviews.csv") %>%
mutate(
`Date Of Review` = lubridate::mdy(`Date Of Review`),
`Property Name` = str_trim(str_remove(`Property Name`, "Hotel")),
`Property Name` = str_trim(str_remove(`Property Name`, "The")),
`Property Name` = case_when(
str_detect(`Property Name`, "^45 Park Lane") ~ "45 Park Lane",
str_detect(`Property Name`, "^Apex") ~ "Apex",
str_detect(`Property Name`, "^Bulgari") ~ "Bulgari",
str_detect(`Property Name`, "^Corinthia") ~ "Corinthia",
str_detect(`Property Name`, "^London Guest House") ~ "Guest House",
str_detect(`Property Name`, "^Xenia") ~ "Xenia",
str_detect(`Property Name`, "^Mandarin") ~ "Mandarin",
str_detect(`Property Name`, "^Mondrian") ~ "Mondrian",
str_detect(`Property Name`, "^Wellesley") ~ "Wellesley",
TRUE ~ `Property Name`
),
`Property Name` = factor(`Property Name`),
review_id = row_number()
) %>%
janitor::clean_names(case = "snake") %>%
rename(review_dt = date_of_review, reviewer_loc = location_of_the_reviewer) %>%
select(review_id, everything())
hotel_0
hotel_0 <- read_csv("input/london_hotel_reviews.csv") %>%
mutate(
`Date Of Review` = lubridate::mdy(`Date Of Review`),
`Property Name` = str_trim(str_remove(`Property Name`, "Hotel")),
`Property Name` = str_trim(str_remove(`Property Name`, "The")),
`Property Name` = case_when(
str_detect(`Property Name`, "^45 Park Lane") ~ "45 Park Lane",
str_detect(`Property Name`, "^Apex") ~ "Apex",
str_detect(`Property Name`, "^Bulgari") ~ "Bulgari",
str_detect(`Property Name`, "^Corinthia") ~ "Corinthia",
str_detect(`Property Name`, "^London Guest House") ~ "Guest House",
str_detect(`Property Name`, "^Xenia") ~ "Xenia",
str_detect(`Property Name`, "^Mandarin") ~ "Mandarin",
str_detect(`Property Name`, "^Mondrian") ~ "Mondrian",
str_detect(`Property Name`, "^Wellesley") ~ "Wellesley",
TRUE ~ `Property Name`
),
`Property Name` = factor(`Property Name`),
review_id = row_number()
) %>%
janitor::clean_names(case = "snake") %>%
rename(review_dt = date_of_review, reviewer_loc = location_of_the_reviewer) %>%
select(review_id, everything())
?read_csv
nrow(hotel_r0) %>% comma(1)
library(scales)
library(tidyverse)
library(tidytext)
library(scales)
nrow(hotel_r0) %>% comma(1)
nrow(hotel_0) %>% comma(1)
n_distinct(hotel_raw_1$property_name)
min(hotel_raw_1$review_dt, na.rm = TRUE)
min(hotel_0$review_dt, na.rm = TRUE)
max(hotel_0$review_dt, na.rm = TRUE)
min(hotel_0$review_dt, na.rm = TRUE)
hotel_1 <- hotel_0 %>%
mutate(
review_text = iconv(review_text, from = "", to = "ASCII", sub = "byte"),
review_text = str_remove_all(review_text, "\\<[[:alnum:]]+\\>")
)
hotel_2 <- hotel_1 %>%
filter(!str_detect(review_text, "( das )|( der )|( und )|( en )")) %>% # German
filter(!str_detect(review_text, "( et )|( de )|( le )|( les )")) %>%   # French
filter(!str_detect(review_text, "( di )|( e )|( la )")) %>%            # Italian
filter(!str_detect(review_text, "( un )|( y )"))                       # Spanish
comma(nrow(hotel_1) - nrow(hotel_2))
hotel_2
tokens_0 <- unnest_tokens(hotel_2, "word", review_text)
hotel_1 %>% head()
hotel_1 %>%
count(property_name, review_rating) %>%
ggplot(aex(y = property_name, x = n, fill = review_rating)) +
geom_col(color = "gray80")
hotel_1 %>%
count(property_name, review_rating) %>%
ggplot(aes(y = property_name, x = n, fill = review_rating)) +
geom_col(color = "gray80")
hotel_1 %>%
count(property_name, review_rating) %>%
mutate(review_rating = factor(review_rating)) %>%
ggplot(aes(y = property_name, x = n, fill = review_rating)) +
geom_col(color = "gray80")
hotel_1 %>%
count(property_name, review_rating) %>%
mutate(review_rating = factor(review_rating)) %>%
ggplot(aes(y = property_name, x = n, fill = review_rating)) +
geom_col(color = "gray80") +
scale_fill_gradient()
hotel_1 %>%
count(property_name, review_rating) %>%
mutate(review_rating = factor(review_rating)) %>%
ggplot(aes(y = property_name, x = n, fill = review_rating)) +
geom_col(color = "gray80") +
scale_fill_brewer()
hotel_1 %>%
count(property_name, review_rating) %>%
mutate(review_rating = factor(review_rating)) %>%
ggplot(aes(y = property_name, x = n, fill = fct_rev(review_rating))) +
geom_col(color = "gray80") +
scale_fill_brewer()
?scale_fill_brewer
hotel_1 %>%
count(property_name, review_rating) %>%
mutate(review_rating = factor(review_rating)) %>%
ggplot(aes(y = property_name, x = n, fill = fct_rev(review_rating))) +
geom_col(color = "gray80") +
scale_fill_brewer()
hotel_1 %>%
count(property_name, review_rating) %>%
mutate(review_rating = factor(review_rating)) %>%
ggplot(aes(y = property_name, x = n, fill = fct_rev(review_rating))) +
geom_col(color = "gray80") +
scale_fill_brewer(direction = -1)
hotel_1 %>%
count(property_name, review_rating) %>%
mutate(review_rating = factor(review_rating)) %>%
ggplot(aes(y = property_name, x = n, fill = fct_rev(review_rating))) +
geom_col(color = "gray80") +
scale_fill_brewer(type = "div", direction = -1)
hotel_1 %>%
count(property_name, review_rating) %>%
mutate(review_rating = factor(review_rating)) %>%
ggplot(aes(y = property_name, x = n, fill = fct_rev(review_rating))) +
geom_col(color = "gray80") +
scale_fill_brewer(type = "div", direction = -1) +
labs(y = NULL, fill = NULL)
hotel_1 %>%
count(property_name, review_rating) %>%
mutate(review_rating = factor(review_rating)) %>%
ggplot(aes(y = fct_rev(property_name), x = n, fill = fct_rev(review_rating))) +
geom_col(color = "gray80") +
scale_fill_brewer(type = "div", direction = -1) +
labs(y = NULL, fill = NULL)
library(glue)
hotel_1 <- hotel_0 %>%
mutate(
review_text = iconv(review_text, from = "", to = "ASCII", sub = "byte"),
review_text = str_remove_all(review_text, "\\<[[:alnum:]]+\\>")
)
hotel_1 %>%
count(property_name, review_rating) %>%
mutate(review_rating = factor(review_rating)) %>%
ggplot(aes(y = fct_rev(property_name), x = n, fill = fct_rev(review_rating))) +
geom_col(color = "gray80") +
scale_fill_brewer(type = "div", direction = -1) +
labs(y = NULL, fill = NULL, title = glue::glue("comma(nrow(hotel_2),1) Hotel Reviews"))
hotel_1 %>%
count(property_name, review_rating) %>%
mutate(review_rating = factor(review_rating)) %>%
ggplot(aes(y = fct_rev(property_name), x = n, fill = fct_rev(review_rating))) +
geom_col(color = "gray80") +
scale_fill_brewer(type = "div", direction = -1) +
labs(y = NULL, fill = NULL, title = glue::glue("{comma(nrow(hotel_2),1)} Hotel Reviews"))
hotel_1 %>%
count(property_name, review_rating) %>%
mutate(review_rating = factor(review_rating)) %>%
ggplot(aes(y = fct_rev(property_name), x = n, fill = fct_rev(review_rating))) +
geom_col(color = "gray80") +
scale_fill_brewer(type = "div", direction = -1) +
labs(
y = NULL, fill = NULL,
title = glue("{comma(nrow(hotel_2),1)} Reviews of 20 Hotels")
)
tokens_0 %>%
count(review_id) %>%
mutate(bin = cut(n, breaks = c(0, seq(25, 250, 25), Inf)))
tokens_0 %>%
count(review_id) %>%
mutate(n_bin = cut(n, breaks = c(0, seq(25, 250, 25), Inf))) %>%
summarize(.by = n_bin, n())
tokens_0 %>%
count(review_id) %>%
mutate(n_bin = cut(n, breaks = c(0, seq(25, 250, 25), Inf))) %>%
summarize(.by = n_bin, n = n()) %>%
ggplot(aes(x = n_bin, y = n)) +
geom_col()
tokens_0 %>%
count(review_id) %>%
mutate(n_bin = cut(n, breaks = c(0, seq(25, 300, 25), Inf))) %>%
summarize(.by = n_bin, n = n()) %>%
ggplot(aes(x = n_bin, y = n)) +
geom_col()
tokens_0 %>%
count(review_id) %>%
mutate(n_bin = cut(n, breaks = c(0, seq(50, 300, 50), Inf))) %>%
summarize(.by = n_bin, n = n()) %>%
ggplot(aes(x = n_bin, y = n)) +
geom_col()
tokens_0 %>%
count(review_id) %>%
mutate(n_bin = cut(n, breaks = c(0, seq(50, 500, 50), Inf))) %>%
summarize(.by = n_bin, n = n()) %>%
ggplot(aes(x = n_bin, y = n)) +
geom_col()
n_distinct(hotel_0$property_name)
hotel_1 %>%
count(property_name, review_rating) %>%
mutate(review_rating = factor(review_rating)) %>%
ggplot(aes(y = fct_rev(property_name), x = n, fill = fct_rev(review_rating))) +
geom_col(color = "gray80") +
scale_fill_brewer(type = "div", direction = -1) +
labs(
y = NULL, fill = NULL,
title = glue("{comma(nrow(hotel_1),1)} Reviews of 20 Hotels")
)
hotel_2 <- hotel_1 %>%
# create unigrams
unnest_tokens("word", review_text) %>%
# correct misspellings
left_join(
fuzzyjoin::misspellings %>% distinct(misspelling, .keep_all = TRUE),
by = join_by(word = misspelling)
) %>%
mutate(word = coalesce(correct, word)) %>%
select(-correct) %>%
tokens_0 %>%
count(review_id) %>%
mutate(n_bin = cut(n, breaks = c(0, seq(50, 500, 50), Inf))) %>%
summarize(.by = n_bin, n = n()) %>%
ggplot(aes(x = n_bin, y = n)) +
geom_col()
hotel_2 <- hotel_1 %>%
# create unigrams
unnest_tokens("word", review_text) %>%
# correct misspellings
left_join(
fuzzyjoin::misspellings %>% distinct(misspelling, .keep_all = TRUE),
by = join_by(word = misspelling)
) %>%
mutate(word = coalesce(correct, word)) %>%
select(-correct)
install.packages("fuzzyjoin")
hotel_2 <- hotel_1 %>%
# create unigrams
unnest_tokens("word", review_text) %>%
# correct misspellings
left_join(
fuzzyjoin::misspellings %>% distinct(misspelling, .keep_all = TRUE),
by = join_by(word = misspelling)
) %>%
mutate(word = coalesce(correct, word)) %>%
select(-correct)
hotel_2 <- hotel_1 %>%
# create unigrams
unnest_tokens("word", review_text) %>%
# correct misspellings
left_join(
fuzzyjoin::misspellings %>% distinct(misspelling, .keep_all = TRUE),
by = join_by(word == misspelling)
) %>%
mutate(word = coalesce(correct, word)) %>%
select(-correct)
hotel_2
hotel_1 <- hotel_0 %>%
mutate(
review_text = iconv(review_text, from = "", to = "ASCII", sub = "byte"),
review_text = str_remove_all(review_text, "\\<[[:alnum:]]+\\>")
) %>%
# Exclude reviews written in a foreign language. One heuristic to handle this
# is to look for words common in other languages that do not also occur in English.
filter(!str_detect(review_text, "( das )|( der )|( und )|( en )")) %>% # German
filter(!str_detect(review_text, "( et )|( de )|( le )|( les )")) %>%   # French
filter(!str_detect(review_text, "( di )|( e )|( la )")) %>%            # Italian
filter(!str_detect(review_text, "( un )|( y )"))                       # Spanish
hotel_1 %>%
count(property_name, review_rating) %>%
mutate(review_rating = factor(review_rating)) %>%
ggplot(aes(y = fct_rev(property_name), x = n, fill = fct_rev(review_rating))) +
geom_col(color = "gray80") +
scale_fill_brewer(type = "div", direction = -1) +
labs(
y = NULL, fill = NULL,
title = glue("{comma(nrow(hotel_1),1)} Reviews of 20 Hotels")
)
hotel_2 <- hotel_1 %>%
# create unigrams
unnest_tokens("word", review_text) %>%
# correct misspellings
left_join(
fuzzyjoin::misspellings %>% distinct(misspelling, .keep_all = TRUE),
by = join_by(word == misspelling)
) %>%
mutate(word = coalesce(correct, word)) %>%
select(-correct)
hotel_2
hotel_2 <- hotel_1 %>%
# create unigrams
unnest_tokens("word", review_text) %>%
# correct misspellings
left_join(
fuzzyjoin::misspellings %>% distinct(misspelling, .keep_all = TRUE),
by = join_by(word == misspelling)
) %>%
mutate(word = coalesce(correct, word)) %>%
select(-correct) %>%
# lemmatize words
mutate(word = textstem::lemmatize_words(word, dictionary = lexicon::hash_lemmas))
install.packages("textstem")
hotel_2 <- hotel_1 %>%
# create unigrams
unnest_tokens("word", review_text) %>%
# correct misspellings
left_join(
fuzzyjoin::misspellings %>% distinct(misspelling, .keep_all = TRUE),
by = join_by(word == misspelling)
) %>%
mutate(word = coalesce(correct, word)) %>%
select(-correct) %>%
# lemmatize words
mutate(word = textstem::lemmatize_words(word, dictionary = lexicon::hash_lemmas))
hotel_2 <- hotel_1 %>%
# create unigrams
unnest_tokens("word", review_text) %>%
# correct misspellings
left_join(
fuzzyjoin::misspellings %>% distinct(misspelling, .keep_all = TRUE),
by = join_by(word == misspelling)
) %>%
mutate(word = coalesce(correct, word)) %>%
select(-correct) %>%
# lemmatize words
mutate(word = textstem::lemmatize_words(word, dictionary = lexicon::hash_lemmas)) %>%
# remove stop words
anti_join(stop_words, by = "word") %>%
# reconstruct the text
nest(token_list = word) %>%
mutate(review_text = map_chr(token_list, ~ unlist(.) %>% paste(collapse = " "))) %>%
select(-token_list)
hotel_2
hotel_1
hotel_0
hotel_2 <- hotel_1 %>%
# remove special chars
mutate(review_text = str_remove_all(review_text, "[[:punct:]]")) %>%
# create unigrams
unnest_tokens("word", review_text) %>%
# correct misspellings
left_join(
fuzzyjoin::misspellings %>% distinct(misspelling, .keep_all = TRUE),
by = join_by(word == misspelling)
) %>%
mutate(word = coalesce(correct, word)) %>%
select(-correct) %>%
# lemmatize words
mutate(word = textstem::lemmatize_words(word, dictionary = lexicon::hash_lemmas)) %>%
# remove stop words
anti_join(stop_words, by = "word") %>%
# reconstruct the text
nest(token_list = word) %>%
mutate(review_text = map_chr(token_list, ~ unlist(.) %>% paste(collapse = " "))) %>%
select(-token_list)
hotel_2
hotel_1 %>%
# remove special chars
mutate(review_text = str_remove_all(review_text, "[[:punct:]]"))
hotel_0
hotel_1 %>%
# remove special chars
mutate(review_text = str_remove_all(review_text, "[:punct:]"))
hotel_1 %>%
# remove special chars
mutate(review_text = str_remove_all(review_text, "[[:punct:]]"))
hotel_2 <- hotel_1 %>%
# remove special chars
mutate(review_text = str_remove_all(review_text, "[:punct:]")) %>%
# create unigrams
unnest_tokens("word", review_text) %>%
# correct misspellings
left_join(
fuzzyjoin::misspellings %>% distinct(misspelling, .keep_all = TRUE),
by = join_by(word == misspelling)
) %>%
mutate(word = coalesce(correct, word)) %>%
select(-correct) %>%
# lemmatize words
mutate(word = textstem::lemmatize_words(word, dictionary = lexicon::hash_lemmas)) %>%
# remove stop words
anti_join(stop_words, by = "word") %>%
# reconstruct the text
nest(token_list = word) %>%
mutate(review_text = map_chr(token_list, ~ unlist(.) %>% paste(collapse = " "))) %>%
select(-token_list)
stop_words
# Get list of misspellings and their correction. Unfortunately, there are multiple
# possible right spellings! (sigh) just choose one.
spell_check <- fuzzyjoin::misspellings %>% distinct(misspelling, .keep_all = TRUE)
# Create a list of stop words. Start with a standard list.
stop_0 <- stopwords::stopwords(language = 'en',source='stopwords-iso')
stop_0
library(tidyverse)
library(tidytext)
library(scales)
library(glue)
hotel_0 <- read_csv("input/london_hotel_reviews.csv") %>%
mutate(
`Date Of Review` = lubridate::mdy(`Date Of Review`),
`Property Name` = str_trim(str_remove(`Property Name`, "Hotel")),
`Property Name` = str_trim(str_remove(`Property Name`, "The")),
`Property Name` = case_when(
str_detect(`Property Name`, "^45 Park Lane") ~ "45 Park Lane",
str_detect(`Property Name`, "^Apex") ~ "Apex",
str_detect(`Property Name`, "^Bulgari") ~ "Bulgari",
str_detect(`Property Name`, "^Corinthia") ~ "Corinthia",
str_detect(`Property Name`, "^London Guest House") ~ "Guest House",
str_detect(`Property Name`, "^Xenia") ~ "Xenia",
str_detect(`Property Name`, "^Mandarin") ~ "Mandarin",
str_detect(`Property Name`, "^Mondrian") ~ "Mondrian",
str_detect(`Property Name`, "^Wellesley") ~ "Wellesley",
TRUE ~ `Property Name`
),
`Property Name` = factor(`Property Name`),
review_id = row_number()
) %>%
janitor::clean_names(case = "snake") %>%
rename(review_dt = date_of_review, reviewer_loc = location_of_the_reviewer) %>%
select(review_id, everything())
hotel_1 <- hotel_0 %>%
mutate(
review_text = iconv(review_text, from = "", to = "ASCII", sub = "byte"),
review_text = str_remove_all(review_text, "\\<[[:alnum:]]+\\>")
) %>%
# Exclude reviews written in a foreign language. One heuristic to handle this
# is to look for words common in other languages that do not also occur in English.
filter(!str_detect(review_text, "( das )|( der )|( und )|( en )")) %>% # German
filter(!str_detect(review_text, "( et )|( de )|( le )|( les )")) %>%   # French
filter(!str_detect(review_text, "( di )|( e )|( la )")) %>%            # Italian
filter(!str_detect(review_text, "( un )|( y )"))                       # Spanish
hotel_1 %>%
count(property_name, review_rating) %>%
mutate(review_rating = factor(review_rating)) %>%
ggplot(aes(y = fct_rev(property_name), x = n, fill = fct_rev(review_rating))) +
geom_col(color = "gray80") +
scale_fill_brewer(type = "div", direction = -1) +
labs(
y = NULL, fill = NULL,
title = glue("{comma(nrow(hotel_1),1)} Reviews of 20 Hotels")
)
# Get list of misspellings and their correction. Unfortunately, there are multiple
# possible right spellings! (sigh) just choose one.
spell_check <- fuzzyjoin::misspellings %>% distinct(misspelling, .keep_all = TRUE)
# Create a list of stop words. Start with a standard list.
stop_0 <- stopwords::stopwords(language = 'en',source='stopwords-iso')
# Some are potentially useful, so remove them from the stop list.
stop_restart <- c(
"appreciate", ""
)
stop_1 <- stop_0[!stop_0 %in% stop_restart]
# Add your own custom words
hotel_2 <- hotel_1 %>%
# remove punctuation
mutate(review_text = str_remove_all(review_text, "[:punct:]")) %>%
# create unigrams
unnest_tokens("word", review_text) %>%
# correct misspellings
left_join(
fuzzyjoin::misspellings %>% distinct(misspelling, .keep_all = TRUE),
by = join_by(word == misspelling)
) %>%
mutate(word = coalesce(correct, word)) %>%
select(-correct) %>%
# lemmatize words
mutate(word = textstem::lemmatize_words(word, dictionary = lexicon::hash_lemmas)) %>%
# remove stop words
anti_join(stop_words, by = "word") %>%
# reconstruct the text
nest(token_list = word) %>%
mutate(review_text = map_chr(token_list, ~ unlist(.) %>% paste(collapse = " "))) %>%
select(-token_list)
tokens_0 %>%
count(review_id) %>%
mutate(n_bin = cut(n, breaks = c(0, seq(50, 500, 50), Inf))) %>%
summarize(.by = n_bin, n = n()) %>%
ggplot(aes(x = n_bin, y = n)) +
geom_col()
install.packages("stm")
install.packages("topicmodels")
